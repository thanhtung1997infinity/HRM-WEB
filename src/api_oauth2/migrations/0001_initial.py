# Generated by Django 3.0.3 on 2020-04-03 20:33

import uuid

import django.db.models.deletion
import oauth2_provider.generators
from core.settings import base
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True
    run_before = [
        ("oauth2_provider", "0001_initial"),
    ]
    dependencies = [
        migrations.swappable_dependency(base.OAUTH2_PROVIDER_ACCESS_TOKEN_MODEL),
        migrations.swappable_dependency(base.AUTH_USER_MODEL),
        migrations.swappable_dependency(base.OAUTH2_PROVIDER_REFRESH_TOKEN_MODEL),
        migrations.swappable_dependency(base.OAUTH2_PROVIDER_APPLICATION_MODEL),
        migrations.swappable_dependency(base.OAUTH2_PROVIDER_GRANT_MODEL),
        migrations.swappable_dependency(base.OAUTH2_PROVIDER_ID_TOKEN_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Application",
            fields=[
                ("id", models.BigAutoField(serialize=False, primary_key=True)),
                (
                    "client_id",
                    models.CharField(
                        default=oauth2_provider.generators.generate_client_id,
                        unique=True,
                        max_length=100,
                        db_index=True,
                    ),
                ),
                (
                    "redirect_uris",
                    models.TextField(
                        help_text="Allowed URIs list, space separated", blank=True
                    ),
                ),
                (
                    "client_type",
                    models.CharField(
                        max_length=32,
                        choices=[
                            ("confidential", "Confidential"),
                            ("public", "Public"),
                        ],
                    ),
                ),
                (
                    "authorization_grant_type",
                    models.CharField(
                        max_length=32,
                        choices=[
                            ("authorization-code", "Authorization code"),
                            ("implicit", "Implicit"),
                            ("password", "Resource owner password-based"),
                            ("client-credentials", "Client credentials"),
                        ],
                    ),
                ),
                (
                    "client_secret",
                    models.CharField(
                        default=oauth2_provider.generators.generate_client_secret,
                        max_length=255,
                        db_index=True,
                        blank=True,
                    ),
                ),
                ("name", models.CharField(max_length=255, blank=True)),
                (
                    "user",
                    models.ForeignKey(
                        related_name="oauth2_provider_application",
                        blank=True,
                        to=base.AUTH_USER_MODEL,
                        null=True,
                        on_delete=models.CASCADE,
                    ),
                ),
                ("skip_authorization", models.BooleanField(default=False)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
                "swappable": "OAUTH2_PROVIDER_APPLICATION_MODEL",
            },
        ),
        # ...
        migrations.CreateModel(
            name="AccessToken",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("token", models.TextField(blank=True)),
                ("expires", models.DateTimeField()),
                ("scope", models.TextField(blank=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "application",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="oauth_accesstoken_related_app",
                        to=base.OAUTH2_PROVIDER_APPLICATION_MODEL,
                    ),
                ),
                # can't add this field yet because the RefreshToken Model hasn't been created:
                # ('source_refresh_token', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='oauth_myaccesstoken_refreshed_access_token', to=base.OAUTH2_PROVIDER_REFRESH_TOKEN_MODEL)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="oauth_accesstoken",
                        to=base.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "swappable": "OAUTH2_PROVIDER_ACCESS_TOKEN_MODEL",
            },
        ),
        # ...
        migrations.CreateModel(
            name="Grant",
            fields=[
                ("id", models.BigAutoField(serialize=False, primary_key=True)),
                ("code", models.CharField(unique=True, max_length=255)),
                ("expires", models.DateTimeField()),
                ("redirect_uri", models.CharField(max_length=255)),
                ("scope", models.TextField(blank=True)),
                (
                    "application",
                    models.ForeignKey(
                        to=base.OAUTH2_PROVIDER_APPLICATION_MODEL,
                        on_delete=models.CASCADE,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="oauth2_provider_grant",
                        to=base.AUTH_USER_MODEL,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
                "swappable": "OAUTH2_PROVIDER_GRANT_MODEL",
            },
        ),
        migrations.CreateModel(
            name="RefreshToken",
            fields=[
                ("id", models.BigAutoField(serialize=False, primary_key=True)),
                ("token", models.TextField(blank=True)),
                (
                    "access_token",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        related_name="refresh_token",
                        to=base.OAUTH2_PROVIDER_ACCESS_TOKEN_MODEL,
                        on_delete=models.SET_NULL,
                    ),
                ),
                (
                    "application",
                    models.ForeignKey(
                        to=base.OAUTH2_PROVIDER_APPLICATION_MODEL,
                        on_delete=models.CASCADE,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="oauth2_provider_refreshtoken",
                        to=base.AUTH_USER_MODEL,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("revoked", models.DateTimeField(null=True)),
            ],
            options={
                "abstract": False,
                "swappable": "OAUTH2_PROVIDER_REFRESH_TOKEN_MODEL",
                # 'unique_together': set([("token", "revoked")]),
            },
        ),
        # now that the RefreshToken Model exists we can add the reference to it in AccessToken:
        migrations.AddField(
            model_name="AccessToken",
            name="source_refresh_token",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="oauth_accesstoken_refreshed_access_token",
                to=base.OAUTH2_PROVIDER_REFRESH_TOKEN_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="grant",
            name="code_challenge",
            field=models.CharField(blank=True, default="", max_length=128),
        ),
        migrations.AddField(
            model_name="grant",
            name="code_challenge_method",
            field=models.CharField(
                blank=True,
                choices=[("plain", "plain"), ("S256", "S256")],
                default="",
                max_length=10,
            ),
        ),
        migrations.AlterField(
            model_name="grant",
            name="redirect_uri",
            field=models.TextField(),
        ),
        migrations.AddField(
            model_name="application",
            name="algorithm",
            field=models.CharField(
                blank=True,
                choices=[
                    ("", "No OIDC support"),
                    ("RS256", "RSA with SHA-2 256"),
                    ("HS256", "HMAC with SHA-2 256"),
                ],
                default="",
                max_length=5,
            ),
        ),
        migrations.AlterField(
            model_name="application",
            name="authorization_grant_type",
            field=models.CharField(
                choices=[
                    ("authorization-code", "Authorization code"),
                    ("implicit", "Implicit"),
                    ("password", "Resource owner password-based"),
                    ("client-credentials", "Client credentials"),
                    ("openid-hybrid", "OpenID connect hybrid"),
                ],
                max_length=32,
            ),
        ),
        migrations.CreateModel(
            name="IDToken",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "jti",
                    models.UUIDField(
                        unique=True,
                        default=uuid.uuid4,
                        editable=False,
                        verbose_name="JWT Token ID",
                    ),
                ),
                ("expires", models.DateTimeField()),
                ("scope", models.TextField(blank=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "application",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=base.OAUTH2_PROVIDER_APPLICATION_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="oauth2_provider_idtoken",
                        to=base.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "swappable": "OAUTH2_PROVIDER_ID_TOKEN_MODEL",
            },
        ),
        migrations.AddField(
            model_name="accesstoken",
            name="id_token",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="access_token",
                to=base.OAUTH2_PROVIDER_ID_TOKEN_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="grant",
            name="nonce",
            field=models.CharField(blank=True, max_length=255, default=""),
        ),
        migrations.AddField(
            model_name="grant",
            name="claims",
            field=models.TextField(blank=True),
        ),
    ]
